<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.to.cdp.repository.RecMapper">

<!--*****************************************************************
	***************************RecCert*******************************
	***************************************************************** -->

	<!-- recCertReason,content 가져오기 -->
	<select id="recCertReason"
			parameterType="com.to.cdp.rec.model.RecCert"
			resultType="com.to.cdp.rec.model.RecCert">
		SELECT
			job,
			jm_fld_nm jmFldNm,
			rec_cert_reason recCertReason,
			rec_cert_content recCertContent
		FROM rec_cert
		WHERE rec_cert_code = #{recCertCode}
	</select>

	<!-- recCertInsert -->
	<insert id="recCertInsert"
			parameterType="com.to.cdp.rec.model.RecCert">
		INSERT INTO rec_cert (
			rec_cert_code, 
			jobdic_seq,
			job,
			jm_cd,
			jm_fld_nm,
			rec_cert_reason, 
			rec_cert_content, 
			rec_cert_condition, 
			rec_cert_registerdate
			)
		VALUES (
			#{recCertCode}, 
			#{jobdicSeq}, 
			#{job},
			#{jmCd}, 
			#{jmFldNm},
			#{recCertReason},
			#{recCertContent},
			#{recCertCondition}, 
			now()
			)
	</insert>
		
	<!-- recCertCount  -->
	<select id="recCertCount"
			resultType="integer">
		SELECT 
			count(*) 
		FROM rec_cert
	</select>
	
	<!-- 전체 자격증 수 구하기 (조건검색 포함)-->
	<select id="infoCertCountAtRec"
			parameterType="java.util.Map"
			resultType="integer">
		SELECT 
			count(*) 
		FROM info_cert
		<where>
			<if test="searchWord != null">
				<choose>
		 			<when test="searchType.equals('jmFldNm')">
						jmFldNm LIKE CONCAT('%', #{searchWord}, '%')
					</when>
					<when test="searchType.equals('obligFldNm')">
						obligFldNm LIKE CONCAT('%', #{searchWord}, '%')
					</when>
					<when test="searchType.equals('mdobligFldNm')">
			 			mdobligFldNm LIKE CONCAT('%', #{searchWord}, '%')
					</when>		
				</choose>
			</if>
		</where>
	</select>
	
	<!-- 추천Cert 리스트보기 -->
	<select id="recCertListWithRecCertCondition"
			parameterType="java.util.Map"
			resultType="com.to.cdp.rec.model.RecCert">
		SELECT                                               
			rec_cert_code recCertCode,               
			jobdic_seq jobdicSeq,             
			jm_cd jmCd,                
			rec_cert_reason recCertReason,               
			rec_cert_content recCertContent,                  
			rec_cert_condition recCertCondition,
			rec_cert_registerdate recCertRegisterDate
		FROM rec_cert                
		WHERE jobdic_seq = #{recCert.jobdicSeq}
		<if test="searchWord != null">
			<choose>
	 			<when test="searchType.equals('jmFldNm')">
					jmFldNm LIKE CONCAT('%', #{searchWord}, '%')
				</when>
				<when test="searchType.equals('obligFldNm')">
					obligFldNm LIKE CONCAT('%', #{searchWord}, '%')
				</when>
				<when test="searchType.equals('mdobligFldNm')">
		 			mdobligFldNm LIKE CONCAT('%', #{searchWord}, '%')
				</when>		
			</choose>
		</if>
	</select>
	
	<!-- 계획디테일에서 ajax이용해서 recCertList 보여주기 -->
	<select id="recCertListByAjax"
			parameterType="com.to.cdp.plan.model.PlanUnite"
			resultType="com.to.cdp.rec.model.RecWithInfoCert">
		SELECT
			rec_cert_code recCertCode,
			jm_cd jmCd,
			rec_cert_condition recCertCondition,
			rec_cert_reason recCertReason,
			rec_cert_content recCertContent,
			jobdic_seq jobdicSeq
		FROM rec_cert
		WHERE jobdic_seq = #{jobdicSeq}
	</select>
	
	<!-- 마지막으로 등록한 primaryKey 값 가져오기 -->
	<select id="recCertLastKey"
			resultType="String">
		SELECT 
			rec_cert_code
		FROM 
			rec_cert
		ORDER BY LENGTH(rec_cert_code) DESC, rec_cert_code DESC 
		LIMIT 1;
	</select>
	
	
<!--*****************************************************************
	***************************RecDept*******************************
	***************************************************************** -->

	<!-- recDeptReason,content 가져오기 -->
	<select id="recDeptReason"
			parameterType="com.to.cdp.rec.model.RecDept"
			resultType="com.to.cdp.rec.model.RecDept">
		SELECT
			job,
			m_class mClass,
			rec_dept_reason recDeptReason,
			rec_dept_content recDeptContent
		FROM rec_dept
		WHERE rec_dept_code = #{recDeptCode}
	</select>
	
	<!-- recDeptInsert -->
	<insert id="recDeptInsert"
			parameterType="com.to.cdp.rec.model.RecDept">
		INSERT INTO rec_dept (
			rec_dept_code, 
			major_seq,
			m_class,
			rec_dept_reason, 
			rec_dept_content, 
			rec_dept_condition, 
			rec_dept_registerdate,
			jobdic_seq,
			job
			)
		VALUES (
			#{recDeptCode}, 
			#{majorSeq},
			#{mClass},
			#{recDeptReason}, 
			#{recDeptContent},
			#{recDeptCondition}, 
			now(),
			#{jobdicSeq},
			#{job}
			)
	</insert>
		
	<!-- 마지막으로 등록한 primaryKey 값 가져오기 -->
	<select id="recDeptLastKey"
			resultType="String">
		SELECT 
			rec_dept_code
		FROM 
			rec_dept
		ORDER BY LENGTH(rec_dept_code) DESC, rec_dept_code DESC 
		LIMIT 1;
	</select>
	
	<!-- 전체 학과 수 구하기 (조건검색 포함)-->
	<select id="infoDeptCountAtRec"
			parameterType="java.util.Map"
			resultType="integer">
		SELECT 
			count(*) 
		FROM info_dept
		<where>
			<if test="searchWord != null">
				<choose>
		 			<when test="searchType.equals('lClass')">
						lClass LIKE CONCAT('%', #{searchWord}, '%')
					</when>
					<when test="searchType.equals('mClass')">
						mClass LIKE CONCAT('%', #{searchWord}, '%')
					</when>
					<when test="searchType.equals('facilName')">
			 			facilName LIKE CONCAT('%', #{searchWord}, '%')
					</when>	
				</choose>
			</if>
		</where>
	</select>
	
	<!-- 추천Dept 리스트보기 -->
	<select id="recDeptListWithRecDeptCondition"
			parameterType="java.util.Map"
			resultType="com.to.cdp.rec.model.RecDept">
		SELECT                                                             
			rec_dept_code recDeptCode,    
			major_seq majorSeq,              
			rec_dept_condition recDeptCondition,
			rec_dept_reason recDeptReason,
			rec_dept_content recDeptContent,
			rec_dept_registerdate recDeptRegisterDate,
			jobdic_seq jobdicSeq
		FROM rec_dept              
		WHERE jobdic_seq = #{recDept.jobdicSeq}
		<if test="searchWord != null">
			<choose>
	 			<when test="searchType.equals('info_dept_name')">
					AND info_dept_name LIKE CONCAT('%', #{searchWord}, '%')
				</when>
				<when test="searchType.equals('info_dept_type')">
					AND info_dept_type LIKE CONCAT('%', #{searchWord}, '%')
				</when>
				<when test="searchType.equals('info_dept_college')">
		 			AND info_dept_college LIKE CONCAT('%', #{searchWord}, '%')
				</when>
				<when test="searchType.equals('rec_dept_condition')">
					AND rec_dept_condition LIKE CONCAT('%', #{searchWord}, '%')
				</when>
			</choose>
		</if>
	</select>
	
	<!-- 계획디테일에서 ajax이용해서 recDeptList 보여주기 -->
	<select id="recDeptListByAjax"
			parameterType="com.to.cdp.plan.model.PlanUnite"
			resultType="com.to.cdp.rec.model.RecWithInfoDept">
		SELECT
			rec_dept_code recDeptCode,
			major_seq majorSeq,
			rec_dept_condition recDeptCondition,
			rec_dept_reason recDeptReason,
			rec_dept_content recDeptContent,
			jobdic_seq jobdicSeq
		FROM rec_dept
		WHERE jobdic_seq = #{jobdicSeq}
	</select>
	
		
<!--*****************************************************************
	***************************RecSchool*****************************
	***************************************************************** -->

	<!-- recSchoolReason,content 가져오기 -->
	<select id="recSchoolReason"
			parameterType="com.to.cdp.rec.model.RecSchool"
			resultType="com.to.cdp.rec.model.RecSchool">
		SELECT
			job,
			school_name schoolName,
			rec_school_reason recSchoolReason,
			rec_school_content recSchoolContent
		FROM rec_school
		WHERE rec_school_code = #{recSchoolCode}
	</select>

	<!-- recSchoolInsert -->
	<insert id="recSchoolInsert"
			parameterType="com.to.cdp.rec.model.RecSchool">
		INSERT INTO rec_school (
			rec_school_code, 
			jobdic_seq,
			job,
			seq,
			school_name,
			rec_school_reason, 
			rec_school_content, 
			rec_school_condition, 
			rec_school_registerdate
			)
		VALUES (
			#{recSchoolCode}, 
			#{jobdicSeq},
			#{job},
			#{seq},
			#{schoolName},
			#{recSchoolReason}, 
			#{recSchoolContent},
			#{recSchoolCondition}, 
			now()
			)
	</insert>
		
	<!-- 마지막으로 등록한 primaryKey 값 가져오기 -->
	<select id="recSchoolLastKey"
			resultType="String">
<!-- 		SELECT 
			rec_school_code 
		FROM 
			rec_school
		ORDER BY 
			rec_school_registerdate
		DESC
		LIMIT 1;
 -->
		SELECT 
			rec_school_code
		FROM 
			rec_school
		ORDER BY LENGTH(rec_school_code) DESC, rec_school_code DESC 
		LIMIT 1;
	</select>
	
	<!-- 추천School 리스트보기 -->
	<select id="recSchoolListWithRecSchoolCondition"
			parameterType="java.util.Map"
			resultType="com.to.cdp.rec.model.RecSchool">
		SELECT              
			rec_school_code recSchoolCode,
			seq,
			rec_school_condition recSchoolCondition,
			rec_school_reason recSchoolReason,
			rec_school_content recSchoolContent,
			rec_school_registerdate recSchoolRegisterDate,
			jobdic_seq jobdicSeq
		FROM rec_school                
		WHERE jobdic_seq = #{recSchool.jobdicSeq}                                          
		<if test="searchWord != null">
			<choose>
	 			<when test="searchType.equals('region')">
					AND region LIKE CONCAT('%', #{searchWord}, '%')
				</when>
				<when test="searchType.equals('schoolGubun')">
					AND schoolGubun LIKE CONCAT('%', #{searchWord}, '%')
				</when>
				<when test="searchType.equals('schoolName')">
		 			AND schoolName LIKE CONCAT('%', #{searchWord}, '%')
				</when>
			</choose>
		</if>
	</select>
	
	<!-- 계획디테일에서 ajax이용해서 recSchoolList 보여주기 -->
	<select id="recSchoolListByAjax"
			parameterType="com.to.cdp.plan.model.PlanUnite"
			resultType="com.to.cdp.rec.model.RecWithInfoSchool">
		SELECT
			rec_school_code recSchoolCode,
			seq,
			rec_school_condition recSchoolCondition,
			rec_school_reason recSchoolReason,
			rec_school_content recSchoolContent,
			jobdic_seq jobdicSeq
		FROM rec_school
		WHERE jobdic_seq = #{jobdicSeq}
	</select>
	
</mapper>